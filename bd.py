import telebot
import sqlite3
from telebot import types
from config import Token, love, allowed_users

bot = telebot.TeleBot(Token())

#–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_access(user_id):
    return user_id in allowed_users()


#–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
@bot.message_handler(commands=['start', 'help'])
def start(message):
    if not check_access(message.from_user.id):
        print("https://t.me/"+message.from_user.username)
        bot.send_message(message.chat.id, 'Unauthorized access')
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    add = types.KeyboardButton(text="/add")
    edit = types.KeyboardButton(text="/edit")
    delete = types.KeyboardButton(text="/delete")
    kb.add(add, edit, delete)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b> üëã\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–æ—á–∫—É –≤–Ω–∏–∑—É –∏–ª–∏ –≤–≤–µ–¥–∏ –≥–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä', parse_mode='html', reply_markup=kb)
    print("https://t.me/"+message.from_user.username)

@bot.message_handler(commands=['i<3u'])
def ilu(message):
    if not check_access(message.from_user.id):
        bot.send_message(message.chat.id, 'Unauthorized access')
        return
    love()


#–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
@bot.message_handler(commands=['search'])
def gid_request(message):
    if not check_access(message.from_user.id):
        bot.send_message(message.chat.id, 'Unauthorized access')
        return
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –≥–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞')
    bot.register_next_step_handler(message, search)

def search(message):
    connect = sqlite3.connect('ts.db')
    cursor = connect.cursor()
    gid = int(message.text)
    cursor.execute(f"SELECT EXISTS(SELECT * FROM bus_id where id = {int(gid)})")
    if cursor.fetchone()[0] == 0:
        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"add_{gid}")
        markup.add(button)
        bot.send_message(message.chat.id, f'–ì–∞—Ä–∞–∂–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ <b>{gid}</b> —É –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç', parse_mode='html', reply_markup=markup)
    else:
        cursor.execute(f"SELECT type, comment FROM bus_id WHERE id = {int(gid)}")
        entry = cursor.fetchone()
        gtype = entry[0]
        gcomment = entry[1]
        if gcomment is None:
            gcomment = ''
        markup = types.InlineKeyboardMarkup()
        edit = types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{gid}")
        delete = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{gid}")
        markup.add(edit, delete)
        bot.send_message(message.chat.id, f'<b>–ì–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {gid}\n<b>–¢–∏–ø:</b> {gtype}\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {gcomment}', parse_mode='html', reply_markup=markup)
        connect.commit()

@bot.callback_query_handler(func=lambda call: call.data.startswith("add_"))
def handle_add_callback(call):
    gid = call.data.split("_")[1]
    add_type(call.message, gid)

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
def handle_edit_callback(call):
    gid = call.data.split("_")[1]
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    select_entry_to_edit(call.message, gid)

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def handle_delete_callback(call):
    gid = call.data.split("_")[1]
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    confirm_delete(call.message, gid)


#–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
@bot.message_handler(commands=['add'])
def add(message):
    if not check_access(message.from_user.id):
        bot.send_message(message.chat.id, 'Unauthorized access')
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    cancel = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")
    kb.add(cancel)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –≥–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', reply_markup=kb)
    bot.register_next_step_handler(message, add_type)

def add_type(message, gid=None):
    if gid is None:
        if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            start(message)
            return
        if message.text.isdigit():
            gid = int(message.text)
            connect = sqlite3.connect('ts.db')
            cursor = connect.cursor()
            cursor.execute(f"SELECT EXISTS(SELECT * FROM bus_id where id = {gid})")
            if cursor.fetchone()[0] == 1:
                cursor.execute(f"SELECT type, comment FROM bus_id WHERE id = {gid}")
                entry = cursor.fetchone()
                gtype = entry[0]
                gcomment = entry[1]
                bot.send_message(message.chat.id, f'–ì–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä <b>{gid}</b> —É–∂–µ –µ—Å—Ç—å –≤ –ë–î\n\n<b>–ì–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {gid}\n<b>–¢–∏–ø:</b> {gtype}\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {gcomment}', parse_mode='html')
                start(message)
                return
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            back = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
            cancel = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")
            kb.add(back, cancel)
            bot.send_message(message.chat.id, f'<b>–ì–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {gid}\n\n–í–≤–µ–¥–∏ —Ç–∏–ø', parse_mode='html', reply_markup=kb)
            bot.register_next_step_handler(message, add_comment, gid=gid)
        else:
            bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä')
            add(message)
    else:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        back = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
        cancel = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")
        kb.add(back, cancel)
        bot.send_message(message.chat.id, f'<b>–ì–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {gid}\n\n–í–≤–µ–¥–∏ —Ç–∏–ø', parse_mode='html', reply_markup=kb)
        bot.register_next_step_handler(message, add_comment, gid=gid)

def add_comment(message, gid):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        add(message)
    elif message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        start(message)
    else:
        gtype = message.text
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        back = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
        skip = types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        cancel = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")
        kb.add(skip, back, cancel)
        bot.send_message(message.chat.id, f'<b>–ì–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {gid}\n<b>–¢–∏–ø:</b> {gtype}\n\n–í–≤–µ–¥–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"', parse_mode='html', reply_markup=kb)
        bot.register_next_step_handler(message, save_entry, gid=gid, gtype=gtype)

def save_entry(message, gid, gtype):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        add_type(message, gid)
    elif message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        start(message)
    else:
        gcomment = message.text
        if message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            gcomment = ''
        connect = sqlite3.connect('ts.db')
        cursor = connect.cursor()
        cursor.execute("INSERT INTO bus_id VALUES (?, ?, ?)", (gid, gtype, gcomment))
        connect.commit()
        send_added_notification(gid, gtype, gcomment, message.from_user.username)
        show_added_entry(message, gid, gtype, gcomment)

def show_added_entry(message, gid, gtype, gcomment):
    bot.send_message(message.chat.id, f'–î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å\n\n<b>–ì–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {gid}\n<b>–¢–∏–ø:</b> {gtype}\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {gcomment}', parse_mode='html')
    start(message)

def send_added_notification(gid, gtype, gcomment, username):
    notification_text = f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ‚ûï\n\n" \
                        f"–ì–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä: {gid}\n" \
                        f"–¢–∏–ø: {gtype}\n" \
                        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {gcomment}\n" \
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}"
    bot.send_message('-805417506', notification_text)


#–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
@bot.message_handler(commands=['edit'])
def edit(message):
    if not check_access(message.from_user.id):
        bot.send_message(message.chat.id, 'Unauthorized access')
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    cancel = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")
    kb.add(cancel)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –≥–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏ "–û—Ç–º–µ–Ω–∞"', reply_markup=kb)
    bot.register_next_step_handler(message, select_entry_to_edit)

def select_entry_to_edit(message, selected_id=None):
    try:
        if selected_id is None:
            selected_id = message.text.lower()
        else:
            selected_id = selected_id
        if selected_id == '–æ—Ç–º–µ–Ω–∞':
            start(message)
        else:
            connect = sqlite3.connect('ts.db')
            cursor = connect.cursor()
            cursor.execute(f"SELECT * FROM bus_id where id = {selected_id}")
            entry = cursor.fetchone()
            if not entry:
                bot.send_message(message.chat.id, f'–ì–∞—Ä–∞–∂–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ <b>{selected_id}</b> —É –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç', parse_mode='html')
                start(message)
            else:
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                picktype = types.KeyboardButton(text="–¢–∏–ø")
                pickcomment = types.KeyboardButton(text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
                cancel = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")
                back = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
                kb.add(picktype, back, pickcomment, cancel)
                selected_type = entry[1]
                selected_comment = entry[2]
                bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n<b>–ì–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {selected_id}\n<b>–¢–∏–ø:</b> {selected_type}\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {selected_comment}', parse_mode='html', reply_markup=kb)
                bot.register_next_step_handler(message, edit_field, selected_id)
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä\n–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞')

def edit_field(message, gid):
    selected_field = message.text.lower()
    if selected_field == '–æ—Ç–º–µ–Ω–∞':
        start(message)
    elif selected_field == '–Ω–∞–∑–∞–¥':
        edit(message)
    elif selected_field == '—Ç–∏–ø':
        show_current_value_and_request_new_value(message, gid, 'type', '–¢–∏–ø')
    elif selected_field == '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π':
        show_current_value_and_request_new_value(message, gid, 'comment', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
    else:
        bot.send_message(message.chat.id, '–í—ã–±–æ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π\n–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞')

def show_current_value_and_request_new_value(message, gid, field_name, field_display_name):
    connect = sqlite3.connect('ts.db')
    cursor = connect.cursor()
    cursor.execute(f"SELECT {field_name} FROM bus_id WHERE id = {gid}")
    current_value = cursor.fetchone()[0]
    
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    back = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
    cancel = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")
    kb.add(back, cancel)
    if field_display_name == "–¢–∏–ø":
        bot.send_message(message.chat.id, f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞: {current_value}\n–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏ "–ù–∞–∑–∞–¥"', reply_markup=kb)
    else:
        bot.send_message(message.chat.id, f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: <code>{current_value}</code>\n–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏ "–ù–∞–∑–∞–¥"', parse_mode='html', reply_markup=kb)
    bot.register_next_step_handler(message, update_field, gid, field_name)

def update_field(message, gid, field_name):
    new_value = message.text
    if new_value.lower() == '–Ω–∞–∑–∞–¥':
        select_entry_to_edit(message, gid)
    elif new_value.lower() == '–æ—Ç–º–µ–Ω–∞':
        start(message)
    else:
        connect = sqlite3.connect('ts.db')
        cursor = connect.cursor()
        cursor.execute(f"SELECT {field_name} FROM bus_id WHERE id = ?", (gid,))
        previous_value = cursor.fetchone()[0]
        cursor.execute(f"UPDATE bus_id SET {field_name} = ? WHERE id = ?", (new_value, gid))
        connect.commit()
        send_edit_notification(gid, field_name, previous_value, new_value, message.from_user.username)
        show_updated_entry(message, gid)
        start(message)

def show_updated_entry(message, gid):
    connect = sqlite3.connect('ts.db')
    cursor = connect.cursor()
    cursor.execute(f"SELECT type, comment FROM bus_id WHERE id = {gid}")
    entry = cursor.fetchone()
    updated_type = entry[0]
    updated_comment = entry[1]

    bot.send_message(message.chat.id, f'<b>–ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å</b>\n\n<b>–ì–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {gid}\n<b>–¢–∏–ø:</b> {updated_type}\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {updated_comment}', parse_mode='html')

def send_edit_notification(gid, field_name, previous_value, new_value, username):
    notification_text = f"üîß –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ üîß\n\n" \
                        f"–ì–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä: {gid}\n" \
                        f"–ü–æ–ª–µ: {field_name}\n" \
                        f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {previous_value}\n" \
                        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}\n" \
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}"
    bot.send_message('-805417506', notification_text)


#–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
@bot.message_handler(commands=['delete'])
def delete(message):
    if not check_access(message.from_user.id):
        bot.send_message(message.chat.id, 'Unauthorized access')
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    cancel = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")
    kb.add(cancel)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –≥–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏ "–û—Ç–º–µ–Ω–∞"', reply_markup=kb)
    bot.register_next_step_handler(message, confirm_delete)

def confirm_delete(message, selected_id=None):
    try:
        if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            start(message)
        else:
            if selected_id is None:
                selected_id = int(message.text)
            else:
                selected_id = selected_id
            connect = sqlite3.connect('ts.db')
            cursor = connect.cursor()
            cursor.execute(f"SELECT * FROM bus_id where id = {selected_id}")
            entry = cursor.fetchone()
            if not entry:
                bot.send_message(message.chat.id, f'–ì–∞—Ä–∞–∂–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ <b>{selected_id}</b> —É –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç', parse_mode='html')
                start(message)
            else:
                kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                confirm_btn = types.KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å")
                back_btn = types.KeyboardButton(text="–ù–∞–∑–∞–¥")
                cancel_btn = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")
                kb.add(confirm_btn, back_btn, cancel_btn)
                selected_type = entry[1]
                selected_comment = entry[2]
                bot.send_message(message.chat.id, f'–¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?\n\n<b>–ì–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {selected_id}\n<b>–¢–∏–ø:</b> {selected_type}\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {selected_comment}', parse_mode='html', reply_markup=kb)
                bot.register_next_step_handler(message, execute_delete, selected_id)
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä')

def execute_delete(message, selected_id):
    if message.text.lower() == '—É–¥–∞–ª–∏—Ç—å':
        connect = sqlite3.connect('ts.db')
        cursor = connect.cursor()
        cursor.execute(f"SELECT type, comment FROM bus_id WHERE id = {selected_id}")
        entry = cursor.fetchone()
        selected_type = entry[0]
        selected_comment = entry[1]

        cursor.execute(f"DELETE FROM bus_id WHERE id = ?", (selected_id,))
        connect.commit()
        send_deleted_notification(selected_id, selected_type, selected_comment, message.from_user.username)
        bot.send_message(message.chat.id, f'–£–¥–∞–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å\n\n<b>–ì–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {selected_id}\n<b>–¢–∏–ø:</b> {selected_type}\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {selected_comment} ', parse_mode='html')
        start(message)
    elif message.text.lower() == '–Ω–∞–∑–∞–¥':
        delete(message)
    else:
        start(message)

def send_deleted_notification(gid, gtype, gcomment, username):
    notification_text = f"‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ‚ûñ\n\n" \
                        f"–ì–∞—Ä–∞–∂–Ω—ã–π –Ω–æ–º–µ—Ä: {gid}\n" \
                        f"–¢–∏–ø: {gtype}\n" \
                        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {gcomment}\n" \
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}"
    bot.send_message('-805417506', notification_text)


#–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['id'])
def print_user_id(message):
    bot.send_message(message.chat.id, f'–¢–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{message.from_user.id}</code>', parse_mode='html')


#–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(content_types=['text'])
def text(message):
    if not check_access(message.from_user.id):
        bot.send_message(message.chat.id, 'Unauthorized access')
        return
    if message.text.isdigit():
        search(message)
    else:
        bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Ç—ã –≤–≤–µ–ª')
        start(message)


def main():
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as e:
            print("Error:", e)
            bot.stop_polling()
            
if __name__ == "__main__":
    main()